#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"powerfx","name":"powerfx"}]}}

#!markdown

# Install .NET and Tools

1. [.NET Framework](https://dot.net/learntocode)
2. [Polyglot Notebooks Extension](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode)
3. [Data Table Extension](https://marketplace.visualstudio.com/items?itemName=RandomFractalsInc.vscode-data-table)

#!markdown

# Useful videos to watch regarding Polyglot Notebooks

.NET Interactive Notebooks was renamed to Polyglot Notebooks.

1. [Learn C# with Interactive Notebooks](https://www.youtube.com/watch?v=xdmdR2JfKfM)
2. [NET Interactive Notebooks with C#/F# in VS Code](https://www.youtube.com/watch?v=DMYtIJT1OeU)
3. [.NET Everywhere - Windows, Linux, and Beyond](https://www.youtube.com/watch?v=ZM6OO2lkxA4)

#!markdown

## Install Power Fx Kernel - Local Dev Version

#!csharp

#i nuget:D:\GitHub\Power-Fx-.NET-Interactive\src\bin\Debug\
#r "nuget:PowerFx.NET.Interactive,2024.05.01.8"

#!markdown

## Install Power Fx Kernel - Nuget

#!csharp

#r "nuget: PowerFx.NET.Interactive,2024.05.01.8"

#!markdown

## Set Variable

#!powerfx

Set(environment, "Polyglot Notebooks ðŸ’— Power Fx")

#!markdown

## Set Table

#!powerfx

ClearCollect( Products,
    Table(
        { Product: "Widget",    'Quantity Requested': 6,  'Quantity Available': 3 },
        { Product: "Gadget",    'Quantity Requested': 10, 'Quantity Available': 20 },
        { Product: "Gizmo",     'Quantity Requested': 4,  'Quantity Available': 11 },
        { Product: "Apparatus", 'Quantity Requested': 7,  'Quantity Available': 6 }
    )
);

#!markdown

## Run Multiple Formulas

#!powerfx

Set(varInput, ForAll( ["4"], Sqrt( Value ) ));
Sequence(4);
First(varInput);

#!markdown

## Tables and Filtering

#!powerfx

ClearCollect( Products,
    Table(
        { Product: "Widget",    'Quantity Requested': 6,  'Quantity Available': 3 },
        { Product: "Gadget",    'Quantity Requested': 10, 'Quantity Available': 20 },
        { Product: "Gizmo",     'Quantity Requested': 4,  'Quantity Available': 11 },
        { Product: "Apparatus", 'Quantity Requested': 7,  'Quantity Available': 6 }
    )
);
First(Products);
AddColumns( Filter( Products, 'Quantity Requested' > 'Quantity Available' ), 'Quantity To Order', 'Quantity Requested' - 'Quantity Available');

#!markdown

## Generate Table

#!powerfx

Concat(
    ForAll( Sequence(8) As Rank,
        Concat(
            ForAll( Sequence(8) As File,
                    If( Mod(Rank.Value + File.Value, 2) = 1, " X ", " . " )
            ),
            Value
        ) & Char(10)
    ),
    Value
);

#!markdown

## Query current state

#!powerfx

?

#!markdown

## Create variables in C#

#!csharp

using System.Collections.Generic;

var x = new List<string>(new[]{"a"});
var today = DateTime.Now;

#!markdown

## Use variables from C# in Power Fx

#!powerfx

#!share x --from csharp
#!share today --from csharp
Set(varAlphabets, x)
Set(varToday, today)

#!markdown

## Read a JSON file using value magic command

#!javascript

#!value --from-file "C:\Users\Natraj\Downloads\colours.json" --name colourJSON

#!markdown

## Now use colourJSON from value magic command

#!powerfx

#!share colourJSON --from value
Set(varColours, colourJSON)

#!markdown

## Set variables in Power Fx

#!powerfx

Set(varText,"Hello Again")

#!markdown

## Use variable from Power Fx in C#

#!csharp

#!share varText --from powerfx
var output = varText;
Console.WriteLine(output);
